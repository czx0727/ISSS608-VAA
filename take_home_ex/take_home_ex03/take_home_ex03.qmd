---
title: "Take-Home Exercise 3"
author: "Chai Zhixuan"
date: 2024-02-05
date-format: long
date-modified: "last-modified"
---

# 1 Overview

From [NCCS](https://www.nccs.gov.sg/singapores-climate-action/impact-of-climate-change-in-singapore/), Singapore is vulnerable to the effects of climate change, evident in the rise in annual mean temperature from 26.9°C to 28.0°C between 1980 and 2020. Additionally, the mean sea level in the Straits of Singapore escalated by 1.2mm to 1.7mm annually from 1975 to 2009.

In recent years, rainfall intensity has heightened, with the annual rainfall total for Singapore experiencing an average increase of 67 mm per decade from 1980 to 2019.

Below shows the visualisation presented by NCCS

![](images/6.PNG)

This take home exercise will explore ways of using visual interactivity and visualising uncertainty methods to validate the claims presented above.

# 2 Data Preparation

I will follow the steps as shown below. I will be downloading ***Daily Rainfall*** in **December** of the year **1983, 2003, 2023** and **June** of the year **1993, 2013** in **Clementi**. The 2 months are selected to compare between the wet (Nov to Jan) and dry (Feb, Jun to Sep) period.

1.  Go to the following website: <http://www.weather.gov.sg/climate-historical-daily>

2.  \(a\) With reference to email queries to NEA, I will make the website non-secure

    ::: callout-note
    Please note that this is only in chrome.
    :::

![](images/1.PNG)

2.  \(b\) I will click the icon beside the link

![](images/2.PNG)

2.  \(c\) Change the insecure content to allow. You will be prompted to reload the website

![](images/3.PNG)

3.  Head back to <http://www.weather.gov.sg/climate-historical-daily>. Select **Clementi**, **December** and **2023.** Then click **"Display"**

![](images/4-01.PNG)

4.  Scroll down to download the CSV file

![](images/5.PNG)

5.  I will repeat the same step to download the rest of the day

# 3 Installing packages

I will use the following packages:

1.  [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
2.  [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
3.  [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.

```{r}
pacman::p_load(ggiraph,plotly, tidyverse)
```

# 4 Data Wrangling

I will import all the files downloaded. An example is shown for 1983 Dec Data. I will also select specific columns I want, mainly: ***Year, Month, Day,*** and ***Daily Rainfall***.

```{r}
#| eval: false
set1_data <- read_csv("data/DAILYDATA_S50_198312.csv",locale=locale(encoding="latin1"))

set1_data <- set1_data %>% select(Year, Month, Day, `Daily Rainfall Total (mm)`)
```

I will proceed to do the same for the other csv files

::: panel-tabset
## 1993 Jun Data

```{r}
#| eval: false
set2_data <- read_csv("data/DAILYDATA_S50_199306.csv",locale=locale(encoding="latin1"))

set2_data <- set2_data %>% select(Year, Month, Day, `Daily Rainfall Total (mm)`)
```

## 2003 Dec Data

```{r}
#| eval: false
set3_data <- read_csv("data/DAILYDATA_S50_200312.csv",locale=locale(encoding="latin1"))

set3_data <- set3_data %>% select(Year, Month, Day, `Daily Rainfall Total (mm)`)
```

## 2013 Jun Data

```{r}
#| eval: false
set4_data <- read_csv("data/DAILYDATA_S50_201306.csv",locale=locale(encoding="latin1"))

set4_data <- set4_data %>% select(Year, Month, Day, `Daily Rainfall Total (mm)`)
```

## 2023 Dec Data

```{r}
#| eval: false
set5_data <- read_csv("data/DAILYDATA_S50_202312.csv",locale=locale(encoding="latin1"))

set5_data <- set5_data %>% select(Year, Month, Day, `Daily Rainfall Total (mm)`)
```
:::

I will merge all the data together and save to rds file

```{r}
#| eval: false
combined_rainfall <- bind_rows(set1_data,set2_data,set3_data,set4_data,set5_data)
```

```{r}
#| eval: false
write_rds(combined_rainfall,
          "data/combined_rainfall.rds")
```

I will read back the rds file.

```{r}
#| eval: false
combined_rainfall <- read_rds("data/combined_rainfall.rds")
```

I will first have a look at the data structure. Further data wrangling is required:

```{r}
#| eval: false
str(combined_rainfall)
```

I will rename the Daily Rainfall Total (mm) to Daily Rainfall

```{r}
#| eval: false
combined_rainfall <- combined_rainfall %>%
   rename("Rainfall" = "Daily Rainfall Total (mm)")
```

I will combine the ***Year, Month and Day*** together to a new column: ***Date***

```{r}
#| eval: false
combined_rainfall$Date <- as.Date(paste(combined_rainfall$Year, combined_rainfall$Month, combined_rainfall$Day, sep = "-"))

```

I will keep ***date, year and rainfall.***

```{r}
#| eval: false
combined_rainfall_1 <- combined_rainfall[, c('Rainfall', 'Date', 'Year')]
```

I will save to rds file

```{r}
#| eval: false
write_rds(combined_rainfall_1,
          "data/combined_rainfall_1.rds")
```

I will import back the file

```{r}
combined_rainfall_1 <- read_rds("data/combined_rainfall_1.rds")
```

# 5 Proposed Sketch

Below is the proposed sketch I have in mind:

![](images/20240210_163123.jpg)

# 6 Data Visualisation

## 6.1 Data visualisation design

### 6.1.1 **Clarity - Graph Title**

Interesting insight from the graph can be put as a main title. The graph title can be interesting to grab the attention of readers.

### **6.1.2 Clarity- Axes Labelling**

Axes labels must be meaningful to ensure readers are aware of what the axes represents. 

### 6.1.3 **Aesthetics - Colour**

Colour should be different from the background. In addition, there should be colour to differentiate between the high rainfall and low rainfall.

## 6.2 Interactivity Principles

### 6.2.1 Animation

Animation may not be required in this interactive visualisation as the purpose is for readers to sieve out if the annual total rainfall rose by 101mm per decade. In my example I will be using Dec of the selected years as a proxy. This will be important to link back to the future climate projections mentioned by NCCS

### 6.2.2 View manipulation: selection function

Pointer is needed to show the year and rainfall when selected. This will give users a guidance to the points they are looking at. Plotly will enable users to select specify areas using lasso or box format

# 7 Final Design

## 7.1 Data Visualisation

```{r,warning=FALSE}
gg_plot <- ggplot(combined_rainfall_1, aes(x = Date, y = Rainfall,color = Rainfall)) +
  geom_point() +
  theme_minimal()+
  geom_hline(yintercept = mean(combined_rainfall_1$Rainfall), linetype = "dashed", color = "red", linewidth = 1) +
  annotate("text", x = median(combined_rainfall_1$Date), y = median(combined_rainfall_1$Rainfall), 
           label = paste("Average Rainfall:", round(mean(combined_rainfall_1$Rainfall), 2), "mm"), size=3,
           vjust = -1, hjust = 1, color = "red")+
labs(y= 'Rainfall (mm)', x= 'Year',title = "Clementi - 40 Years of Rainfall: 1983 to 2023",
       subtitle= 'Period: Dec-83, Jun-93, Dec-03, Jun-13, Dec-23',
       caption = "Source: Meteorological Service Singapore")+
   theme(axis.title.y= element_text(angle=0), 
        axis.title.y.right = element_text(angle=0, vjust = 1),
        panel.grid.major = element_line(color= 'grey', size = 0.1),
        panel.background= element_blank(), 
        axis.line= element_line(color= 'grey'),
        plot.caption = element_text(hjust = 0))

gg_plot
```

## 7.2 Interactive Visualisation

```{r}

gg_plot <- ggplot(combined_rainfall_1, aes(x = Date, y = Rainfall,color = Rainfall)) +
  geom_point() +
  labs(title = 'Clementi - 40 Years of Rainfall: 1983 to 2023', x = 'Year', y = 'Daily Rainfall (mm)') +
  theme_minimal()+
  geom_hline(yintercept = mean(combined_rainfall_1$Rainfall), linetype = "dashed", color = "red", linewidth = 1) +
  annotate("text", x = median(combined_rainfall_1$Date), y = median(combined_rainfall_1$Rainfall), 
           label = paste("Average Rainfall:", round(mean(combined_rainfall_1$Rainfall), 2), "mm"), size=3,
           vjust = -1, hjust = 1, color = "red")+
  scale_color_gradient(low = "blue", high = "red")
  
  

interactive_plot <- ggplotly(gg_plot)

interactive_plot

```

# 8 Observation

Based on the interactive visualisation above, using only Dec 1983, 2003 and 2023 for wet season, and Jun 1993 and 2013 for dry season, the claims made by NCCS seem to be valid: The contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.

For the months of rainfalls in Dec, the concentration of rainfalls have a balance between the numbers of days above and below the average mean of the selected period in 2023. Previously, 1993 and 2003, the rainfalls seems to be clustered below the average mean of the selected period, with a few exceptional days above the average mean of the selected period.

For Jun 2003, the rainfalls are below the selected period's average, as compared to Jun 1993.

Rainfalls' amount increase in the wet season, and decrease in the dry season across the 40 years.

However, further studies can be done by analysing all the data instead of selected period.
