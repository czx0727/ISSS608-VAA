---
title: "Hands-on Ex10"
author: "Chai Zhixuan"
date: 2024-01-28
date-format: long
date-modified: "last-modified"
---

# **Getting started**

::: callout-note
Finally the last hands-on exerciseðŸ˜‹

**Outcomes:**

1.  Compare it with Tableau?
:::

The following R packages will be used.

-   [tidyverse](https://www.tidyverse.org/) provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to [readr](https://readr.tidyverse.org/), [tidyr](https://tidyr.tidyverse.org/), [dplyr](https://dplyr.tidyverse.org/), [ggplot](https://ggplot2.tidyverse.org/), [tibble](https://tibble.tidyverse.org/), [stringr](https://stringr.tidyverse.org/), [forcats](https://forcats.tidyverse.org/) and [purrr](https://purrr.tidyverse.org/).

-   [lubridate](https://r4va.netlify.app/chap31) provides functions to work with dates and times more efficiently.

-   [ggthemes](https://r4va.netlify.app/chap31) is an extension of ggplot2. It provides additional [themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) beyond the basic themes of ggplot2.

-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with [gt](https://gt.rstudio.com/), an R package specially designed for anyone to make wonderful-looking tables using the R programming language.

-   [reactable](https://glin.github.io/reactable/) provides functions to create interactive data tables for R, based on the [React Table](https://github.com/tanstack/table/tree/v7) library and made with [reactR](https://github.com/react-R/reactR).

-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse)
```

## **Importing Microsoft Access database**

### **The data set**

### **Importing database into R**

In the code chunk below,Â `odbcConnectAccess()`Â ofÂ [**RODBC**](https://cran.r-project.org/web/packages/RODBC/)Â package is used used to import a database query table into R.

::: callout-important
Before running the code chunk, you need to change the R system to 32bit version. This is because theÂ `odbcConnectAccess()`Â is based on 32bit and not 64bit. However, I will not be changing to 32bit to prevent any system issue as I am doing the VAA project, Shiny.

I will change to 32bit after the term ends. Below are screenshot from : [link](https://r4va.netlify.app/chap31)
:::

```{r}
#| eval: false
library(rocbc)
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

### **Data Preparation**

```{r}
#| eval: false
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```

```{r}
#| eval: false
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

### **Bullet chart in ggplot2**

```{r}
#| eval: false
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```

![](images/1.PNG)

## **Plotting sparklines using ggplot2**

### **Preparing the data**

```{r}
#| eval: false
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The code chunk below is used to compute the minimum, maximum and end othe the month sales.

```{r}
#| eval: false
mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

The code chunk below is used to compute the 25 and 75 quantiles.

```{r}
#| eval: false
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)
```

### **sparklines in ggplot2**

```{r}
#| eval: false
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

![](images/2.PNG)

## **Static Information Dashboard Design: gt and gtExtras methods**

### **Plotting a simple bullet chart**

```{r}
#| eval: false
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

![](images/3.PNG)

## **sparklines: gtExtras method**

```{r}
#| eval: false
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

```{r}
#| eval: false
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

### **Plotting Coffechain Sales report**

```{r}
#| eval: false
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)
```

### **Adding statistics**

```{r}
#| eval: false
report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)
```

### **Combining the data.frame**

```{r}
#| eval: false
spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

```{r}
#| eval: false
sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )
```

```{r}
#| eval: false
sales_data = left_join(sales, spark)
```

### **Plotting the updated data.table**

```{r}
#| eval: false
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

![](images/4.PNG)

### **Combining bullet chart and sparklines**

```{r}
#| eval: false
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 
```

```{r}
#| eval: false
sales_data = sales_data %>%
  left_join(bullet)
```

```{r}
#| eval: false
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

![](images/5.PNG)

## **Interactive Information Dashboard Design: reactable and reactablefmtr methods**

```{r}
#| eval: false
remotes::install_github("timelyportfolio/dataui")
```

```{r}
#| eval: false
library(dataui)
```

### **Plotting interactive sparklines**

```{r}
#| eval: false
report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))
```

```{r}
#| eval: false
reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

![](images/7-01.PNG)

![]()

### **Changing the pagesize**

```{r}
#| eval: false
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

![](images/7-02.PNG)

### **Adding points and labels**

```{r}
#| eval: false
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last")
        )
    )
  )
)
```

![](images/8-01.PNG)

### **Adding reference line**

```{r}
#| eval: false
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

![](images/9-01.PNG)

### **Adding bandline**

```{r}
#| eval: false
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

![](images/10-01.PNG)

### **Changing from sparkline to sparkbar**

```{r}
#| eval: false
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```

![](images/11-01.PNG)

::: callout-important
Will revisit this after the poster presentation!!
:::
