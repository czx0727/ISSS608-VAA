---
title: "Hands-on Ex 8"
author: "Chai Zhixuan"
date: 2024-01-28
date-format: long
date-modified: "last-modified"
---

# **Getting Started**

::: callout-note
## Zhixuan's personal outcome

1.  Appreciate the visualisation with network data using R
2.  Link it to project and work
:::

### **Installing and launching R packages**

```{r}
#| eval: false
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

### **Importing network data from files**

```{r}
#| eval: false
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

### **Reviewing the imported data**

```{r}
#| eval: false
glimpse(GAStech_edges)
```

### **Wrangling time**

### **Reviewing the revised date fields**

```{r}
#| eval: false
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

### **Wrangling attributes**

### **Reviewing the revised edges file**

```{r}
#| eval: false
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

## **Creating network objects using tidygraph**

### **The tbl_graph object**

### **The dplyr verbs in tidygraph**

### **Using `tbl_graph()` to build tidygraph data model**

```{r}
#| eval: false
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

### **Reviewing the output tidygraph\'s graph object**

```{r}
#| eval: false
GAStech_graph
```

### **Reviewing the output tidygraph\'s graph object**

### **Changing the active object**

```{r}
#| eval: false
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

## **Plotting Static Network Graphs with ggraph package**

### **Plotting a basic network graph**

```{r}
#| eval: false
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

### **Changing the default network graph theme**

```{r}
#| eval: false
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

###  **Changing the coloring of the plot**

```{r}
#| eval: false
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

### **Working with ggraph\'s layouts**

### **Fruchterman and Reingold layout**

```{r}
#| eval: false
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

### **Modifying network nodes**

```{r}
#| eval: false
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

### **Modifying edges**

```{r}
#| eval: false
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

## **Creating facet graphs**

###  **Working with *facet_edges()***

```{r}
#| eval: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### **Working with *facet_edges() - Additional***

The code chunk below uses *theme()* to change the position of the legend.

```{r}
#| eval: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

###  **A framed facet graph**

```{r}
#| eval: false
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### **Working with *facet_nodes()***

```{r}
#| eval: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## **Network Metrics Analysis**

### **Computing centrality indices**

```{r}
#| eval: false
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

### **Visualising network metrics**

```{r}
#| eval: false
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

### **Visualising Community**

```{r}
#| eval: false
g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

## **Building Interactive Network Graph with visNetwork**

### **Data preparation**

```{r}
#| eval: false
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

### **Plotting the first interactive network graph**

```{r}
#| eval: false
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

### **Working with layout**

```{r}
#| eval: false
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

### **Working with visual attributes - Nodes**

```{r}
#| eval: false
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

```{r}
#| eval: false
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **Working with visual attributes - Edges**

```{r}
#| eval: false
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **Interactivity**

```{r}
#| eval: false
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
