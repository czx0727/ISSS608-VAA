---
title: "Hands-On Ex 1"
author: "Chai Zhixuan"
date: 2024-01-06
date-format: long
date-modified: "last-modified"
---

# Getting Started

This hands-on exercise is on **A Layered Grammar of Graphics: ggplot2 methods.**

::: callout-note
## Zhixuan's personal learning outcomes

1.  Recap of ggplot 2 using R
2.  Understand and recap on the various statistical plots
3.  Link concepts learn to other modules/area of work
:::

Please note that this hands on exercise will not be possible with the help from this [link](https://r4va.netlify.app/chap01)

## Install and launching R packages

The code chunk below uses p_load() of [pacman package](https://cran.r-project.org/web/packages/pacman/index.html) to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing the data

```{r}

exam_data <- read_csv("data/Exam_data.csv")
```

# Bar chart

The code chunk below plots a bar chart by usingÂ [`geom_bar()`](https://ggplot2.tidyverse.org/reference/geom_bar.html). This is from elearn video.

```{r}
ggplot(data = exam_data, aes (x = RACE)) +

geom_bar()
```

# **R Graphics VS ggplot**

It is important to know and compare between the base R and ggplot. In this way, I will learn to appreciate the features of [ggplot](https://ggplot2.tidyverse.org/):

::: panel-tabset
## R Graphics

```{r}
hist(exam_data$MATHS)
```

## ggplot2

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

::: callout-note
Personal remarks:

ggplot seems to have a more beautiful layout and labeling. Comparing excel and maybe with python ðŸ˜ƒ
:::

# **Essential Grammatical Elements in ggplot2: data**

To read on sharing by Prof on [Grammer of Graphics.](https://r4va.netlify.app/chap01#grammar-of-graphics)

I will call a ggplot function using the code chunk below:

```{r}
ggplot(data=exam_data)
```

::: callout-note
I note a blank page appears. From prof's note:

-   `ggplot()` initializes a ggplot object.

-   The *data* argument defines the dataset to be used for plotting.

-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`.
:::

# **Essential Grammatical Elements in ggplot2: [Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)**

Code chunk below adds the aesthetic element into the plot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

::: callout-note
ggplot includes the x-axis and the axis\'s label.
:::

# **Essential Grammatical Elements in ggplot2: geom**

This is a recap of the concepts use in geospatial analytics for [geom](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).

Geometric objects are the actual marks we put on a plot. Examples include:

-   *geom_point* for drawing individual points (e.g., a scatter plot)

-   *geom_line* for drawing lines (e.g., for a line charts)

-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)

-   *geom_bar* for drawing bars (e.g., for bar charts)

-   *geom_histogram* for drawing binned values (e.g.Â a histogram)

-   *geom_polygon* for drawing arbitrary shapes

-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

## **Geometric Objects: geom_bar**

The code chunk below plots a bar chart by usingÂ [`geom_bar()`](https://ggplot2.tidyverse.org/reference/geom_bar.html).

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

This is plotted in [Bar chart]

## **Geometric Objects: geom_dotplot**

In the code chunk below,Â [`geom_dotplot()`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html)Â of ggplot2 is used to plot a dot plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

::: callout-note
Personal opinion is that it is not a good visualisation using dots. I would prefer bar chart. The plot above is more for reference for using **geom_dotplot**
:::

The code chunk below performs the following two steps:

-   `scale_y_continuous()` is used to turn off the y-axis, and

-   *binwidth argument* is used to change the binwidth to 2.5.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```

::: callout-note
Again, my personal opinion is that this is not a good visualisation
:::

## **Geometric Objects: `geom_histogram()`**

In the code chunk below,Â [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html)Â is used to create a simple histogram by using values inÂ *MATHS*Â field ofÂ *exam_data*. Default bin is 30.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

## **Modifying a geometric object by changing `geom()`**

In the code chunk below,

-   *bins* argument is used to change the number of bins to 20,

-   *fill* argument is used to shade the histogram with light blue color, and

-   *color* argument is used to change the outline colour of the bars in black

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  
```

::: callout-note
This histogram seems to be visually appealing
:::

I will proceed to try with the other subjects as well:

::: panel-tabset
## English

```{r}
ggplot(data=exam_data, 
       aes(x= ENGLISH)) +
  geom_histogram(bins=20,            
                 color="darkblue",      
                 fill="light blue")
```

## Science

```{r}
ggplot(data=exam_data, 
       aes(x= SCIENCE)) +
  geom_histogram(bins=20,            
                 color="darkblue",      
                 fill="light blue")
```
:::

## **Modifying a geometric object by changing *aes()***

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

I will proceed to try with the other subjects as well:

::: panel-tabset
## English

```{r}
ggplot(data=exam_data, 
       aes(x= ENGLISH, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

## Science

```{r}
ggplot(data=exam_data, 
       aes(x= SCIENCE, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```
:::

## **Geometric Objects: geom-density()**

[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html)Â computes and plotsÂ [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

I decided to try with other subjects (Science and English) as well:

::: panel-tabset
## English

```{r}
ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_density() 
```

## Science

```{r}
ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_density() 
```
:::

The code chunk below plots two kernel density lines by usingÂ *colour*Â orÂ *fill*Â arguments ofÂ *aes()*

::: panel-tabset
## Math

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

## English

```{r}
ggplot(data=exam_data, 
       aes(x = ENGLISH, 
           colour = GENDER)) +
  geom_density()
```

## Science

```{r}
ggplot(data=exam_data, 
       aes(x = SCIENCE, 
           colour = GENDER)) +
  geom_density()
```
:::

## **Geometric Objects: geom_boxplot**

[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all \"outlying\" points individually.

This is a boxplot.

The code chunk below plots boxplots by using [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html).

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()            
```

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

::: callout-note
Good to compare between different boxplots. However, it will be more meaningful to have the statistics summary
:::

## **Geometric Objects: geom_violin**

The code below plot the distribution of Maths score by gender in violin plot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

::: callout-note
Not visually appealing to compare
:::

## **Geometric Objects: geom_point()**

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            
```

## ***geom*** **objects can be combined**

The code chunk below plots the data points on the boxplots by using bothÂ `geom_boxplot()`Â andÂ `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)        
```

::: callout-note
This is more for comparision
:::

## **Essential Grammatical Elements in ggplot2: stat**

### **Working with `stat()`**

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```

###  **Working with stat - the *stat_summary()* method**

The code chunk below adds mean values by usingÂ [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html)Â function and overriding the default geom.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y="mean",         
               colour ="red",        
               size=4)               
```

### **Working with stat - the `geom()` method**

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="red",          
             size=4)          
```

### **Adding a best fit curve on a scatterplot?**

The scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.

In the code chunk below,Â [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html)Â is used to plot a best fit curve on the scatterplot. The default method used is *loess*.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

The default smoothing method can be overridden as shown below.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5)
```

::: callout-note
Question to ask myself: Why do I need to draw a line to compare? Is the scatterplot sufficient?
:::

# **Essential Grammatical Elements in ggplot2: Facets**

## **Working with `facet_wrap()`**

[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using `facet-wrap()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

::: callout-note
Good for comparison within a same group
:::

### **`facet_grid()` function**

[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html)Â forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

The code chunk below plots a trellis plot usingÂ `facet_grid()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

# **Essential Grammatical Elements in ggplot2: Coordinates**

## **Working with Coordinate**

By the default, the [Bar chart] of ggplot2 is in vertical form.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

The code chunk below flips the horizontal bar chart into vertical bar chart by usingÂ `coord_flip()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

## **Changing the y- and x-axis range**

The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

# **Essential Grammatical Elements in ggplot2: themes**

A list of theme can be found at thisÂ [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g.Â x-axis), a rectangle (e.g.Â graph background), or text (e.g.Â axis title).

## **Working with theme**

The code chunk below plot a horizontal bar chart usingÂ `theme_gray()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

A horizontal bar chart plotted usingÂ `theme_classic()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

A horizontal bar chart plotted usingÂ `theme_minimal()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

I will try with the other themes:

::: panel-tabset
## theme_bw()

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_bw()
```

## theme_light()

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_light()
```

## theme_dark()

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_dark()
```
:::

::: callout-note
Theme_gray() seems to be the best
:::

The next step will be to compare between the various plots - comparing between math, science and english grades.

[Further reference](https://r4va.netlify.app/chap01#reference)
